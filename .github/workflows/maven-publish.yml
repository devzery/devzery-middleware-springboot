# This workflow will build a package using Maven and then publish it to Maven Central when a release is created

name: Maven Package

on:
  workflow_dispatch:
    inputs:
      deploy_confirmation:
        description: 'Check to confirm deployment'
        required: true
        type: boolean

  # push:
  #     branches:
  #       - main

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          server-id: central
          settings-path: ${{ github.workspace }}/.github/maven # location for the settings.xml file

      - name: Build with Maven
        run: mvn clean package
  
  release:
    needs: build  # Ensure 'release' only runs if 'build' succeeds
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          server-id: central
          settings-path: ${{ github.workspace }}/.github/maven # location for the settings.xml file
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Verify GPG Installation
        run: gpg --version

      - name: Import GPG Key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode | gpg --batch --import
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
          echo -e "5\ny\n" | gpg --command-fd 0 --batch --edit-key "$KEY_ID" trust

      - name: Verify GPG Key Import
        run: gpg --list-secret-keys --keyid-format LONG

      - name: Get last version from Git tags
        id: get_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_VERSION=${LATEST_TAG#v}" >> $GITHUB_ENV

      - name: Get commit message
        id: commit_msg
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV

      - name: Determine next version
        id: versioning
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.LATEST_VERSION }}"
          #COMMIT_MSG="${{ env.COMMIT_MSG }}"

          if [[ "$COMMIT_MSG" == *"[major]"* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$COMMIT_MSG" == *"[minor]"* ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "$COMMIT_MSG" == *"[patch]"* ]]; then
            patch=$((patch + 1))
          fi

          NEW_VERSION="$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      - name: Update `pom.xml` version
        run: |
          mvn versions:set -DnewVersion=${{ env.NEW_VERSION }} -DgenerateBackupPoms=false

      - name: Commit and Push updated `pom.xml`
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add pom.xml
          git diff --staged --quiet || git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Sign Artifacts
        run: mvn clean verify -P release -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} -Dgpg.args=--pinentry-mode=loopback

      - name: Publish and Release to Maven Central
        run: mvn clean deploy -P release --settings .github/maven/settings.xml -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} -Dgpg.args=--pinentry-mode=loopback
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Tag the new version
        run: |
          git tag "v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"
